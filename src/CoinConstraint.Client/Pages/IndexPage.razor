@page "/"
@inject IBudgetingService BudgetingService

<LoadSpinnerComponent @ref="_loadSpinner" @bind-LoadSpinnerIsHidden="_pageIsLoaded"></LoadSpinnerComponent>

<ExpenseDetailComponent @ref="_expenseModal"
                        ExpenseAdded=HandleNewExpense
                        ExpenseUpdated=HandleUpdatedExpenses>
</ExpenseDetailComponent>

<BudgetsModalComponent @ref="_budgetsModal"
                       Budgets="_budgets"
                       BudgetAdded=HandleNewBudget
                       BudgetModified=HandleUpdatedBudgets
                       BudgetDeleted=HandleDeletedBudget
                       BudgetsSaveRequested="@(async() => await SaveBudgets())">
</BudgetsModalComponent>

@if (_pageIsLoaded)
{
    <Field Horizontal="true" Margin="Margin.Is1.FromLeft">
        <Label Margin="Margin.Is4.FromRight.Is2.FromTop">Budgets</Label>
        <FieldBody>
            <SelectList TItem=Budget
                    TValue="int"
                    Data=@this.BudgetsForDropdown
                    TextField=@((budget) => budget.Title)
                    ValueField=@((budget) => budget.ID)
                    SelectedValue=@_selectedBudget.ID
                    SelectedValueChanged=@(async(budgetID) => await HandleBudgetChange(budgetID))>
            </SelectList>
        </FieldBody>
        <Button Margin="Margin.Is2.FromBottom.Is2.FromTop.OnMobile.Is0.FromTop.OnTablet.Is4.FromLeft.OnTablet" Color="Color.Success" Size="Size.Small" Clicked=OpenBudgetManagementModal>Manage Budgets</Button>
    </Field>

     <DataGrid TItem="Expense"
          @bind-SelectedRow="@_selectedExpense"
          Data="@_selectedBudget.Expenses"
          CommandMode="DataGridCommandMode.ButtonRow"
          Filterable="false"
          Editable="true"
          EditMode="DataGridEditMode.Popup"
          FilterMethod="DataGridFilterMethod.StartsWith"
          PageSize="10"
          RowRemoved="@HandleDeletedExpense"
          ShowPageSizes="false"
          ShowPager="true">

        <DataGridColumns>
            <DataGridCommandColumn TItem="Expense" Width="170px">
                <SaveCommandTemplate>
                    <Button Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                </CancelCommandTemplate>
                <EditCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@(() => OpenExpenseDetailModal(context.Item))">@context.LocalizationString</Button>
                </EditCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Title)" Caption="Title" Sortable="false" />
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Description)" Caption="Description" Sortable="false" />
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Amount)" Caption="Amount" Sortable="false">
                <DisplayTemplate>
                    @String.Format("{0:C}", ( context as Expense )?.Amount)
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.DueDate)" Caption="Due Date" Sortable="false">
                <DisplayTemplate>
                    @($"{( context as Expense )?.DueDate.Date.ToString("MM/dd/yyyy")}")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Pay)" Caption="Pay Now" Sortable="false" />
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Paid)" Caption="Paid" Sortable="false" />
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Automatic)" Caption="Auto-Pay" Sortable="false" />
            <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Note)" Caption="Note" Sortable="false">
                <EditTemplate>
                    <Field Horizontal="true">
                        <Label>Test Note Lbl</Label>
                        <FieldBody>
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="@( v => context.CellValue = v)"></TextEdit>
                        </FieldBody>
                    </Field>
                </EditTemplate>
            </DataGridColumn>
        </DataGridColumns>

        <ButtonRowTemplate>
            <Button Size="Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Success" Clicked=OpenExpenseDetailModal>Add</Button>
            <Button Size="Size.Small" Disabled="@(_selectedExpense == null)" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Secondary" Clicked="@(() => OpenExpenseDetailModal(context.EditCommand.Item))">Edit</Button>
            <Button Size="Size.Small" Disabled="@(_selectedExpense == null)" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Danger" Clicked="context.DeleteCommand.Clicked">Delete</Button>
        </ButtonRowTemplate>
    </DataGrid>

    <Row>
        <Column ColumnSize=ColumnSize.IsThird>
            <div>
                <Card Margin="Margin.Is4.OnY" Style="height: 250px; overflow: scroll">
                    <CardHeader>
                            Notes
                            <Button><Icon IconSize="IconSize.Large" TextColor="TextColor.Success" Name="@("fas fa-plus-square")"></Icon></Button>
                    </CardHeader>
                    <CardBody Padding="Padding.Is0.FromBottom">
                        <DataGrid TItem="Note"
                              @bind-SelectedRow="@_selectedNote"
                              Class="budget-notes"
                              Data="@_selectedBudget.Notes"
                              CommandMode="DataGridCommandMode.ButtonRow"
                              Filterable="false"
                              Editable="true"
                              EditMode="DataGridEditMode.Popup"
                              FilterMethod="DataGridFilterMethod.StartsWith"
                              PageSize="_selectedBudget.Notes.Count"
                              RowRemoved="StateHasChanged"
                              ShowPageSizes="false"
                              ShowCaptions="false"
                              ShowPager="false">

                            <DataGridColumns>
                                <DataGridColumn TItem="Note" Editable="true" Field="@nameof(Note.NoteText)" Sortable="false" />
                            </DataGridColumns>
                        </DataGrid>
                    </CardBody>
                </Card>
            </div>
        </Column>

        <Column ColumnSize=ColumnSize.IsThird>
            <div>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>Totals</CardHeader>
                    <Row>
                        <Field Margin="Margin.Is4.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnTablet.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Budget Amount</Label>
                            <FieldBody>
                                <TextEdit MaskType="MaskType.Numeric" Size="Size.Small" Text="@_budgetAmountText" TextChanged=HandleBudgetAmountChange></TextEdit>
                            </FieldBody>
                        </Field>

                        <Field Margin="Margin.Is1.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnTablet.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Expensed Amount</Label>
                            <FieldBody>
                                <TextEdit Size="Size.Small" MaskType="MaskType.Numeric" Disabled="true" Text="@_selectedBudget.ExpensedAmount.ToString()"></TextEdit>
                            </FieldBody>
                        </Field>
                    </Row>
                </Card>
            </div>
        </Column>
    </Row>

    <Button Size="Size.Small" Clicked="@(async() => await SaveChanges())" Margin="Margin.Is2.FromTop" Padding="Padding.Is2.OnX.Is1.OnY" Color="Color.Primary"><Icon Name="IconName.Save" /> Save</Button>
}

