@page "/"
@inject IBudgetingService BudgetingService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using CoinConstraint.Client.Infrastructure.Util;
@attribute [Authorize]

<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="_isSmallScreen" />
<MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="_isMediumScreen" />
<MediaQuery Media="@Breakpoints.LargeUp" @bind-Matches="_isLargeScreen" />

<LoadSpinnerComponent @ref="_loadSpinner"></LoadSpinnerComponent>

<ExpenseDetailComponent @ref="_expenseModal"
                        ExpenseAdded=HandleNewExpense
                        ExpenseUpdated=HandleUpdatedExpenses>
</ExpenseDetailComponent>

<BudgetsModalComponent @ref="_budgetsModal"
                       Budgets="_budgets"
                       BudgetAdded=HandleNewBudget
                       BudgetCloneRequested=HandleBudgetClone
                       BudgetModified=HandleUpdatedBudgets
                       BudgetDeleted=HandleDeletedBudget
                       BudgetsSaveRequested="@(async() => await SaveBudgets())">
</BudgetsModalComponent>

<NoteModalComponent @ref="_noteModal" NoteAdded=HandleNewNote>
</NoteModalComponent>

@if (_pageIsLoaded)
{
    <Field Horizontal="true" Margin="Margin.Is1.FromLeft">
        <Label Margin="Margin.Is4.FromRight.Is2.FromTop">Budgets</Label>
        <FieldBody>
            <SelectList TItem=Budget
                    TValue="int?"
                    Data=@this.BudgetsForDropdown
                    TextField=@((budget) => budget.Title)
                    ValueField=@((budget) => budget.ID)
                    SelectedValue=@_selectedBudget.ID
                    SelectedValueChanged=@(async(budgetID) => await HandleBudgetChange(budgetID))>
            </SelectList>
        </FieldBody>
        <Button Margin="Margin.Is2.OnY.OnMobile.Is0.FromTop.OnTablet.Is2.Is4.FromLeft" 
            Color="Color.Primary" 
            Size="Size.ExtraSmall" 
            Clicked=OpenBudgetManagementModal>
            <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Large" Name="@("fas fa-clipboard-list")"></Icon>
            @if (_isSmallScreen)
            {
                <span>Manage</span>
            }
            else
            {
                <span>Manage Budgets</span>
            }
        </Button>
    </Field>

    <Card>
        <CardHeader>
            Expenses
        </CardHeader>

        <CardBody Padding=Padding.Is0.OnMobile.Is4.OnTablet>
            <div>            
                <DataGrid TItem="Expense"
                      @bind-SelectedRow="@_selectedExpense"
                      Class="expense-grid"
                      Data="@_selectedBudget.Expenses"
                      CommandMode="_isSmallScreen ? DataGridCommandMode.ButtonRow : DataGridCommandMode.Default"
                      Filterable="false"
                      Editable="true"
                      EditMode="DataGridEditMode.Popup"
                      FilterMethod="DataGridFilterMethod.StartsWith"
                      RowRemoved="@HandleDeletedExpense"
                      ShowPageSizes="false"
                      ShowPager="true"
                      Virtualize="true"
                      VirtualizeOptions="@(new() { DataGridHeight = "400px"})">

                    <DataGridColumns>

                        <DataGridColumn Width="150px" TextAlignment="TextAlignment.Left"  TItem="Expense" Editable="true" Field="@nameof(Expense.Title)" Caption="Title" Sortable="false" >
                            <CaptionTemplate>
                                <Div TextAlignment="TextAlignment.Left" >
                                    Title   
                                </Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                @if (_isSmallScreen)
                                {
                                    <span>@(context.Title.Truncate(6))</span>
                                }
                                else
                                {
                                    <span>@(context.Title.Truncate(20))</span>
                                }
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn Displayable="(!_isSmallScreen)" Width=250px TItem="Expense" Editable="true" Field="@nameof(Expense.Description)" Caption="Description" Sortable="false" >
                            <DisplayTemplate>
                                <span class="responsive-expense-column">@(context.Description.Truncate(50))</span>
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="Expense" Width=150px Editable="true" Field="@nameof(Expense.Amount)" Caption="Amount" Sortable="false">
                            <CaptionTemplate>
                                <Div TextAlignment="TextAlignment.Center">
                                    Amount
                                </Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                @String.Format("{0:C}", ( context as Expense )?.Amount)
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn TextAlignment="TextAlignment.Center" Width=150px TItem="Expense" Editable="true" Field="@nameof(Expense.DueDate)" Caption="Due Date" Sortable="false">
                            <CaptionTemplate>
                                <Div TextAlignment="TextAlignment.Center">
                                    Due Date
                                </Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                @($"{( context as Expense )?.DueDate.Date.ToString("MM/dd/yyyy")}")
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn Displayable="(!_isSmallScreen)" Width=100px TItem="Expense" TextAlignment="TextAlignment.Center" Editable="true" Field="@nameof(Expense.Pay)" Caption="Pay Now" Sortable="false" >
                            <CaptionTemplate >
                                <Div TextAlignment="TextAlignment.Center">Pay Now</Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                    <Check TValue="bool" Checked="context.Pay" Disabled="true" ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn Displayable="(!_isSmallScreen)" Width=100px TextAlignment="TextAlignment.Center" TItem="Expense" Editable="true" Field="@nameof(Expense.Paid)" Caption="Paid" Sortable="false" >
                            <CaptionTemplate >
                                <Div TextAlignment="TextAlignment.Center">Paid</Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                    <Check TValue="bool" Checked="context.Paid" Disabled="true"  ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn Displayable="(!_isSmallScreen)" Width=100px TextAlignment="TextAlignment.Center" TItem="Expense" Editable="true" Field="@nameof(Expense.Automatic)" Caption="Auto-Pay" Sortable="false" >
                            <CaptionTemplate>
                                <Div TextAlignment="TextAlignment.Center">Auto-Pay</Div>
                            </CaptionTemplate>
                            <DisplayTemplate>
                                    <Check TValue="bool" Checked="context.Automatic" Disabled="true" ReadOnly="true" />
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn Displayable="(!_isSmallScreen)" TItem="Expense" Editable="true" Field="@nameof(Expense.Note)" Width=250px Caption="Note" Sortable="false">
                            <DisplayTemplate>
                                @(context.Note.Truncate(50))
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.PaymentURL)" Width=100px ShowCaption=false Sortable="false">
                            <DisplayTemplate>
                                <div>
                                    <Button Size="Size.ExtraSmall" Class="expense-grid-responsive-button" Color="Color.Secondary"  Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is0.OnX" Clicked="@(async () => await OpenPaymentURLAsync(context))">
                                        @if (_isSmallScreen)
                                        {
                                            <span>Pay</span>
                                        }
                                        else
                                        {
                                            <span><Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-dollar-sign")"></Icon>Pay</span>
                                        }
                                    </Button>
                                </div>
                            </DisplayTemplate>
                        </DataGridColumn>

                        <DataGridCommandColumn TItem="Expense" Displayable="(!_isSmallScreen)" >
                            <EditCommandTemplate>
                                <Button Size="Size.ExtraSmall" Color="Color.Secondary"  Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is4.FromRight.Is0.FromLeft"  Clicked="@(() => OpenExpenseDetailModal(context.Item))">
                                    <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-pen")"></Icon>@context.LocalizationString
                                </Button>
                            </EditCommandTemplate>
                            <DeleteCommandTemplate>
                                <Button Size="Size.ExtraSmall" Color="Color.Secondary"  Padding="Padding.Is2.OnX.Is1.OnY" Clicked="context.Clicked">
                                    <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-trash-alt")"></Icon>@context.LocalizationString
                                </Button>
                            </DeleteCommandTemplate>
                            <NewCommandTemplate></NewCommandTemplate>
                        </DataGridCommandColumn>

                    </DataGridColumns>

                    <ButtonRowTemplate>
                        <Button Size="_isSmallScreen ? Size.ExtraSmall : Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is2.FromRight.Is2.FromLeft.OnMobile.Is0.FromLeft.OnTablet" Color="Color.Secondary" Clicked=OpenExpenseDetailModal>
                            <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-plus-square")"></Icon>
                            @if (_isSmallScreen)
                            {
                                <span>Add</span>
                            }
                            else 
                            {
                                <span>Add Expense</span>
                            }
                        </Button>
                        @if (_isSmallScreen)
                        {
                            <Button Size="Size.ExtraSmall" Color="Color.Secondary"  Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is1.FromRight.Is0.FromLeft"  Clicked="@(() => OpenExpenseDetailModal(context.EditCommand.Item))">
                                <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-pen")"></Icon>Edit
                            </Button>
                            <Button Size="Size.ExtraSmall" Color="Color.Secondary"  Padding="Padding.Is2.OnX.Is1.OnY" Margin=Margin.Is0.OnX Clicked="context.DeleteCommand.Clicked">
                                <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-trash-alt")"></Icon>Delete
                            </Button>    
                        }
                    </ButtonRowTemplate>
                </DataGrid>
                </div>
        </CardBody>
    </Card>

    <Row>
        <Column ColumnSize=ColumnSize.Is4.OnTablet.Is3.OnWidescreen>
            <div>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        Notes
                    </CardHeader>
                    <CardBody Padding="Padding.Is0.FromBottom">
                        <Div Style="height: 250px; overflow: scroll">
                            <DataGrid TItem="Note"
                                  @bind-SelectedRow="@_selectedNote"
                                  Class="budget-notes"
                                  Data="@_selectedBudget.Notes"
                                  CommandMode="DataGridCommandMode.ButtonRow"
                                  Filterable="false"
                                  Editable="true"
                                  EditMode="DataGridEditMode.Inline"
                                  PageSize="_selectedBudget.Notes.Count"
                                  RowRemoved="StateHasChanged"
                                  ShowPageSizes="false"
                                  ShowCaptions="false"
                                  ShowPager="false">

                                <DataGridColumns>
                                    <DataGridColumn TItem="Note" Editable="true" Field="@nameof(Note.NoteText)" Sortable="false">
                                        <DisplayTemplate>
                                            @(context.NoteText.Truncate(50))
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                </DataGridColumns>
                            </DataGrid>
                        </Div>  
                        <Button Margin=Margin.Is3.FromTop.Is2.FromBottom Size=Size.ExtraSmall Clicked="OpenNoteModalForNewNote" Color=Color.Success>
                            <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-plus-square")"></Icon>Add Note
                        </Button>
                    </CardBody>
                </Card>
            </div>
        </Column>

        <Column ColumnSize=ColumnSize.Is4.OnTablet.Is3.OnWidescreen>
            <div>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>Totals</CardHeader>
                    <Row>
                        <Field Margin="Margin.Is4.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Budget Amount</Label>
                            <FieldBody>
                                <TextEdit MaskType="MaskType.Numeric" Size="Size.Small" Text="@_budgetAmountText" TextChanged=HandleBudgetAmountChange></TextEdit>
                            </FieldBody>
                        </Field>

                        <Field Margin="Margin.Is1.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Expensed Amount</Label>
                            <FieldBody>
                                <TextEdit Size="Size.Small" MaskType="MaskType.Numeric" Disabled="true" Text="@_selectedBudget.ExpensedAmount.ToString()"></TextEdit>
                            </FieldBody>
                        </Field>
                    </Row>
                </Card>
            </div>
        </Column>
    </Row>

    <Button Size=Size.Medium Clicked="@(async() => await SaveChanges())" Margin="Margin.Is4.FromBottom.Is2.FromRight" Padding="Padding.Is2.OnX.Is1.OnY" Color="Color.Primary"><Icon Name="IconName.Save" /> Save</Button>
}

