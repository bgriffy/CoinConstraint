@page "/"
@inject IBudgetingService BudgetingService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using CoinConstraint.Client.Infrastructure.Util;


<LoadSpinnerComponent @ref="_loadSpinner" @bind-LoadSpinnerIsHidden="_pageIsLoaded"></LoadSpinnerComponent>

<ExpenseDetailComponent @ref="_expenseModal"
                        ExpenseAdded=HandleNewExpense
                        ExpenseUpdated=HandleUpdatedExpenses>
</ExpenseDetailComponent>

<BudgetsModalComponent @ref="_budgetsModal"
                       Budgets="_budgets"
                       BudgetAdded=HandleNewBudget
                       BudgetModified=HandleUpdatedBudgets
                       BudgetDeleted=HandleDeletedBudget
                       BudgetsSaveRequested="@(async() => await SaveBudgets())">
</BudgetsModalComponent>

<NoteModalComponent @ref="_noteModal" NoteAdded=HandleNewNote>
</NoteModalComponent>



@if (_pageIsLoaded)
{
    <Field Horizontal="true" Margin="Margin.Is1.FromLeft">
        <Label Margin="Margin.Is4.FromRight.Is2.FromTop">Budgets</Label>
        <FieldBody>
            <SelectList TItem=Budget
                    TValue="int"
                    Data=@this.BudgetsForDropdown
                    TextField=@((budget) => budget.Title)
                    ValueField=@((budget) => budget.ID)
                    SelectedValue=@_selectedBudget.ID
                    SelectedValueChanged=@(async(budgetID) => await HandleBudgetChange(budgetID))>
            </SelectList>
        </FieldBody>
        <Button Margin="Margin.Is2.FromBottom.Is2.FromTop.OnMobile.Is0.FromTop.OnTablet.Is4.FromLeft.OnTablet" Color="Color.Secondary" Size="Size.ExtraSmall" Clicked=OpenBudgetManagementModal>Manage Budgets</Button>
    </Field>

    <Card>
        <CardHeader>
            Expenses
        </CardHeader>

        <CardBody>
            <DataGrid TItem="Expense"
                  @bind-SelectedRow="@_selectedExpense"
                  Data="@_selectedBudget.Expenses"
                  CommandMode="DataGridCommandMode.Default"
                  Filterable="false"
                  Editable="true"
                  EditMode="DataGridEditMode.Popup"
                  FilterMethod="DataGridFilterMethod.StartsWith"
                  PageSize="10"
                  RowRemoved="@HandleDeletedExpense"
                  ShowPageSizes="false"
                  ShowPager="true">

                <DataGridColumns>

                    <DataGridColumn Width="150px" TextAlignment="TextAlignment.Left"  TItem="Expense" Editable="true" Field="@nameof(Expense.Title)" Caption="Title" Sortable="false" >
                        <CaptionTemplate>
                            <Div TextAlignment="TextAlignment.Left" >
                                Title   
                            </Div>
                        </CaptionTemplate>
                    </DataGridColumn>

                    <DataGridColumn Width=250px TItem="Expense" Editable="true" Field="@nameof(Expense.Description)" Caption="Description" Sortable="false" >
                         <DisplayTemplate>
                            @(context.Description.Truncate(50))
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TextAlignment="TextAlignment.Center" TItem="Expense" Width=150px Editable="true" Field="@nameof(Expense.Amount)" Caption="Amount" Sortable="false">
                        <CaptionTemplate>
                            <Div TextAlignment="TextAlignment.Center">
                                Amount
                            </Div>
                        </CaptionTemplate>
                        <DisplayTemplate>
                            @String.Format("{0:C}", ( context as Expense )?.Amount)
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TextAlignment="TextAlignment.Center" Width=150px TItem="Expense" Editable="true" Field="@nameof(Expense.DueDate)" Caption="Due Date" Sortable="false">
                        <CaptionTemplate>
                            <Div TextAlignment="TextAlignment.Center">
                                Due Date
                            </Div>
                        </CaptionTemplate>
                        <DisplayTemplate>
                            @($"{( context as Expense )?.DueDate.Date.ToString("MM/dd/yyyy")}")
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn Width=150px TItem="Expense" TextAlignment="TextAlignment.Center" Editable="true" Field="@nameof(Expense.Pay)" Caption="Pay Now" Sortable="false" >
                        <CaptionTemplate >
                            <Div TextAlignment="TextAlignment.Center">Pay Now</Div>
                        </CaptionTemplate>
                        <DisplayTemplate>
                                <Check TValue="bool" Checked="context.Pay" Disabled="true" ReadOnly="true" />
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn Width=150px TextAlignment="TextAlignment.Center" TItem="Expense" Editable="true" Field="@nameof(Expense.Paid)" Caption="Paid" Sortable="false" >
                        <CaptionTemplate >
                            <Div TextAlignment="TextAlignment.Center">Paid</Div>
                        </CaptionTemplate>
                        <DisplayTemplate>
                                <Check TValue="bool" Checked="context.Paid" Disabled="true" ReadOnly="true" />
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn Width=150px TextAlignment="TextAlignment.Center" TItem="Expense" Editable="true" Field="@nameof(Expense.Automatic)" Caption="Auto-Pay" Sortable="false" >
                        <CaptionTemplate >
                            <Div TextAlignment="TextAlignment.Center">Auto-Pay</Div>
                        </CaptionTemplate>
                        <DisplayTemplate>
                                <Check TValue="bool" Checked="context.Automatic" Disabled="true" ReadOnly="true" />
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.Note)" Width=250px Caption="Note" Sortable="false">
                        <DisplayTemplate>
                            @(context.Note.Truncate(50))
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridColumn TItem="Expense" Editable="true" Field="@nameof(Expense.PaymentURL)" Width=95px ShowCaption=false Sortable="false">
                        <DisplayTemplate>
                            <Button Size="Size.ExtraSmall" Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is0.OnX"  Color="Color.Warning" Clicked="@(async () => await OpenPaymentURLAsync(context))">
                                <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-dollar-sign")"></Icon>Pay
                            </Button>
                        </DisplayTemplate>
                    </DataGridColumn>

                    <DataGridCommandColumn TItem="Expense">
                        <EditCommandTemplate>
                            <Button Size="Size.ExtraSmall" Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is4.FromRight.Is0.FromLeft"  Color="Color.Secondary" Clicked="@(() => OpenExpenseDetailModal(context.Item))">
                                <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-pen")"></Icon>@context.LocalizationString
                            </Button>
                        </EditCommandTemplate>
                        <DeleteCommandTemplate>
                            <Button Size="Size.ExtraSmall" Padding="Padding.Is2.OnX.Is1.OnY" Color="Color.Danger" Clicked="context.Clicked">
                                <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-trash-alt")"></Icon>@context.LocalizationString
                            </Button>
                        </DeleteCommandTemplate>
                        <NewCommandTemplate></NewCommandTemplate>
                    </DataGridCommandColumn>

                </DataGridColumns>

                <ButtonRowTemplate>
                    <Button Size="Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Success" Clicked=OpenExpenseDetailModal>
                        <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-plus-square")"></Icon>Add Expense
                    </Button>
                </ButtonRowTemplate>
            </DataGrid>
        </CardBody>
    </Card>

    <Row>
        <Column ColumnSize=ColumnSize.Is4.OnTablet.Is3.OnWidescreen>
            <div>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        Notes
                    </CardHeader>
                    <CardBody Padding="Padding.Is0.FromBottom">
                        <Div Style="height: 250px; overflow: scroll">
                            <DataGrid TItem="Note"
                                  @bind-SelectedRow="@_selectedNote"
                                  Class="budget-notes"
                                  Data="@_selectedBudget.Notes"
                                  CommandMode="DataGridCommandMode.ButtonRow"
                                  Filterable="false"
                                  Editable="true"
                                  EditMode="DataGridEditMode.Inline"
                                  PageSize="_selectedBudget.Notes.Count"
                                  RowRemoved="StateHasChanged"
                                  ShowPageSizes="false"
                                  ShowCaptions="false"
                                  ShowPager="false">

                                <DataGridColumns>
                                    <DataGridColumn TItem="Note" Editable="true" Field="@nameof(Note.NoteText)" Sortable="false">
                                        <DisplayTemplate>
                                            @(context.NoteText.Truncate(50))
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                </DataGridColumns>
                            </DataGrid>
                        </Div>  
                        <Button Margin=Margin.Is3.FromTop.Is2.FromBottom Size=Size.ExtraSmall Clicked="OpenNoteModalForNewNote" Color=Color.Success>
                            <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-plus-square")"></Icon>Create Note
                        </Button>
                    </CardBody>
                </Card>
            </div>
        </Column>

        <Column ColumnSize=ColumnSize.Is4.OnTablet.Is3.OnWidescreen>
            <div>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>Totals</CardHeader>
                    <Row>
                        <Field Margin="Margin.Is4.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnTablet.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Budget Amount</Label>
                            <FieldBody>
                                <TextEdit MaskType="MaskType.Numeric" Size="Size.Small" Text="@_budgetAmountText" TextChanged=HandleBudgetAmountChange></TextEdit>
                            </FieldBody>
                        </Field>

                        <Field Margin="Margin.Is1.FromLeft.Is2.FromTop" ColumnSize="ColumnSize.Is4.OnTablet.Is2.OnWidescreen">
                            <Label Class="index-page-total-label" Margin="Margin.Is4.FromRight.Is2.FromTop">Expensed Amount</Label>
                            <FieldBody>
                                <TextEdit Size="Size.Small" MaskType="MaskType.Numeric" Disabled="true" Text="@_selectedBudget.ExpensedAmount.ToString()"></TextEdit>
                            </FieldBody>
                        </Field>
                    </Row>
                </Card>
            </div>
        </Column>
    </Row>

    <Button Size=Size.Medium Clicked="@(async() => await SaveChanges())" Margin="Margin.Is2.FromTop" Padding="Padding.Is2.OnX.Is1.OnY" Color="Color.Primary"><Icon Name="IconName.Save" /> Save</Button>
}

