
<Modal @ref="_noteModal">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Note</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>

        <ModalBody>
            <MemoEdit Rows="8" @bind-Text=this.NoteText />
        </ModalBody>

        <ModalFooter>
            <Button Size="Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Success" Clicked="@(async() => await Save())">Save</Button>
            <Button Size="Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Secondary" Clicked="@(() => _noteModal.Hide())">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal _noteModal;
    private Note _note;

    [Parameter]
    public EventCallback<Note> NoteAdded { get; set; }

    [Parameter]
    public EventCallback NoteUpdated { get; set; }

    public string NoteText { get; set; } = "";

    public async Task Show()
    {
        _note = new Note();
        _note.IsNew = true;
        this.NoteText = _note.NoteText;
        await _noteModal.Show();
    }

    public async Task Show(Note note)
    {
        _note = note;
        _note.IsNew = false;
        this.NoteText = _note.NoteText;
        await _noteModal.Show();
    }

    private async Task Save()
    {
        _note.NoteText = this.NoteText;
        if (_note.IsNew)
        {
            await NoteAdded.InvokeAsync(_note);
        }
        else
        {
            await NoteUpdated.InvokeAsync();
        }
        await _noteModal.Hide();
    }
}
