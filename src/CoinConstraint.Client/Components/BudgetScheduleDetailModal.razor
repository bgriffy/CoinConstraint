@using CoinConstraint.Domain.Enums
<Modal @ref=_scheduleModal>
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Budget Schedule</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody Class="expense-modal-body">
            @if (_schedule != null)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.IsHalf">
                        <Field>
                            <Label>Start Date</Label>
                            <DateEdit KeyDown=@(async(e) => await HandleKeydownEvent(e)) TValue="DateTime" @bind-Date="_schedule.StartDate"></DateEdit>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsHalf">
                        <Field>
                            <Label>End Date</Label>
                            <DateEdit KeyDown=@(async(e) => await HandleKeydownEvent(e)) TValue="DateTime" @bind-Date="_schedule.EndDate"></DateEdit>
                        </Field>
                    </Column>
                </Row>

                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <Field>
                            <Label>Frequency</Label>
                            <EditForm Model="_schedule"> 
                                <InputSelect @bind-Value="_schedule.ScheduleFrequency" class="form-control"> 
                                    @foreach (Enum item in Enum.GetValues(typeof(ScheduleFrequency)))
                                    { 
                                        <option value="@item">@item.ToString()</option> 
                                    } 
                                </InputSelect> 
                            </EditForm>
                        </Field>
                    </Column>
                </Row>
            }
        </ModalBody>
    </ModalContent>
</Modal>


@code {
    private Blazorise.Modal _scheduleModal;
    private BudgetSchedule _schedule;
    private bool _isDirty = false;

    [Parameter]
    public EventCallback<BudgetSchedule> BudgetScheduleAdded { get; set; }

    [Parameter]
    public EventCallback BudgetScheduleUpdated { get; set; }

    public async Task HandleKeydownEvent(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Save();
        }
    }

    public async Task Show(BudgetSchedule budgetSchedule = null)
    {
        if (budgetSchedule == null)
        {
            budgetSchedule = new BudgetSchedule();
        }
        await Task.Run( () => _schedule = budgetSchedule);
        StateHasChanged();
        await _scheduleModal.Show();
    }

    private async Task Save()
    {
        if (_schedule.IsNew)
        {
            await BudgetScheduleAdded.InvokeAsync(_schedule);
        }
        else
        {
            _schedule.IsUpdated = true;
            await BudgetScheduleUpdated.InvokeAsync();
        }

        _isDirty = false;

        await _scheduleModal.Hide();
    }
}
