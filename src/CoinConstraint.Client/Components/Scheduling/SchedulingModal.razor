@using CoinConstraint.Client.Components.Scheduling;

<Modal @ref="_schedulingModal">
    <ModalContent Size="ModalSize.Large" Centered="true">
        <ModalHeader>
            <ModalTitle>Schedules</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>

        <ModalBody>

            <ScheduleDetailModal @ref="_scheduleDetailModal"
                                       BudgetScheduleAdded="HandleNewSchedule"
                                       BudgetScheduleUpdated="@(async() => await HandleModifiedSchedule())">
            </ScheduleDetailModal>

            <MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="_isSmallScreen" />
            <MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="_isMediumScreen" />
            <MediaQuery Media="@Breakpoints.LargeUp" @bind-Matches="_isLargeScreen" />

            <div>
                @if (this.Budget != null)
                {
                    <DataGrid TItem="BudgetSchedule"
                          @bind-SelectedRow="@_selectedSchedule"
                          Data="@this.Budget.BudgetSchedules"
                          Class="schedules-grid"
                          CommandMode="_isSmallScreen ? DataGridCommandMode.ButtonRow : DataGridCommandMode.Default"
                          Filterable="false"
                          Editable="true"
                          EditMode="DataGridEditMode.Popup"
                          FilterMethod="DataGridFilterMethod.StartsWith"
                          PageSize="10"
                          RowRemoved="@(async(schedule) => await HandleDeletedSchedule(schedule))"
                          ShowPageSizes="false"
                          ShowPager="true"
                          Virtualize="true"
                          VirtualizeOptions="@(new() { DataGridHeight = "300px"})">

                        <DataGridColumns>
                            @if (!_isSmallScreen)
                            {
                                <DataGridColumn DisplayOrder=1 TItem="BudgetSchedule" Editable="false" Field="@nameof(_selectedSchedule.ScheduleFrequency)" Caption="Frequency" Sortable="false">
                                    <DisplayTemplate>
                                        @($"{( context as BudgetSchedule).ScheduleFrequency}")
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn DisplayOrder=1 TItem="BudgetSchedule" Editable="false" Field="@nameof(_selectedSchedule.StartDate)" Caption="Start Date" Sortable="false">
                                    <DisplayTemplate>
                                        @($"{( context as BudgetSchedule )?.StartDate?.Date.ToString("MM/dd/yyyy") ?? "none"}")
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn DisplayOrder=2 TItem="BudgetSchedule" Editable="false" Field="@nameof(_selectedSchedule.EndDate)" Caption="End Date" Sortable="false">
                                    <DisplayTemplate>
                                        @($"{( context as BudgetSchedule )?.EndDate?.Date.ToString("MM/dd/yyyy") ?? "none"}")
                                    </DisplayTemplate>
                                </DataGridColumn>
                            }
                            else
                            {
                                <DataGridColumn DisplayOrder=1 TItem="BudgetSchedule" Editable="false" Field="@nameof(_selectedSchedule.ScheduleFrequency)" Caption="Frequency" Sortable="false">
                                    <DisplayTemplate>
                                        @($"{( context as BudgetSchedule).ScheduleFrequency}")
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn DisplayOrder=1 TItem="BudgetSchedule" Editable="false" Field="@nameof(_selectedSchedule.StartDate)" Caption="Start Date" Sortable="false">
                                    <DisplayTemplate>
                                        @($"{( context as BudgetSchedule )?.StartDate?.Date.ToString("MM/dd/yyyy") ?? "none"}")
                                    </DisplayTemplate>
                                </DataGridColumn>
                            }

                            <DataGridCommandColumn DisplayOrder="4" Displayable="(!_isSmallScreen)" TItem="BudgetSchedule">
                                <EditCommandTemplate>
                                    <Button Size="Size.ExtraSmall" Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is4.FromRight.Is0.FromLeft" Color="Color.Secondary" Clicked="@(async() => await EditSchedule(context.Item))">
                                        <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-pen")"></Icon>@context.LocalizationString
                                    </Button>
                                </EditCommandTemplate>
                                <DeleteCommandTemplate>
                                    <Button Size="Size.ExtraSmall" Margin="Margin.Is2.OnX" Padding="Padding.Is2.OnX.Is1.OnY" Color="Color.Secondary" Clicked="context.Clicked">
                                        <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-trash-alt")"></Icon>@context.LocalizationString
                                    </Button>
                                </DeleteCommandTemplate>
                                <NewCommandTemplate></NewCommandTemplate>
                            </DataGridCommandColumn>
                        </DataGridColumns>

                        <ButtonRowTemplate>
                            <Button Size="Size.Small" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight.Is4.FromTop" Color="Color.Success" Clicked="@(async () => await AddNewSchedule())"><Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-plus-square")"></Icon>Add Schedule</Button>
                            @if (_isSmallScreen)
                            {
                                <Button Size="Size.ExtraSmall" Color="Color.Secondary" Padding="Padding.Is3.OnX.Is1.OnY" Margin="Margin.Is1.FromRight.Is0.FromLeft.Is4.FromTop" Clicked="@(async () => await EditSchedule(context.EditCommand.Item))">
                                    <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-pen")"></Icon>Edit
                                </Button>
                                <Button Size="Size.ExtraSmall" Color="Color.Secondary" Padding="Padding.Is2.OnX.Is1.OnY" Margin=Margin.Is0.OnX.Is4.FromTop Clicked="context.DeleteCommand.Clicked">
                                    <Icon Margin=Margin.Is2.FromRight IconSize="IconSize.Small" Name="@("fas fa-trash-alt")"></Icon>Delete
                                </Button>
                            }
                        </ButtonRowTemplate>
                    </DataGrid>
                }
            </div>
        </ModalBody>

        <ModalFooter>
            <Button Size="Size.Medium" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Primary" Clicked="@(async() => await Save())"><Icon Margin=Margin.Is2.FromRight Name="IconName.Save" />Save</Button>
            <Button Size="Size.Medium" Padding="Padding.Is2.OnX.Is1.OnY" Margin="Margin.Is1.FromRight" Color="Color.Secondary" Clicked="@(async () => await _schedulingModal.Hide())">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
